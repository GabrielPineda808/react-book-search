{"version":3,"sources":["components/Navbar/Navbar.js","components/Header/Header.js","utils/API.js","pages/Saved.js","App.js","registerServiceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","class","href","Header","API","getBooks","axios","get","getBook","id","deleteBook","delete","saveBook","bookData","post","Saved","state","title","authors","description","image","link","loadBooks","then","res","console","log","data","catch","err","className","Component","App","react_router_dom","components_Navbar_Navbar","components_Header_Header","react_router","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.21893241.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Navbar.css';\r\n\r\nfunction Navbar () {\r\n  return (\r\n    <nav class=\"navbar navbar-light bg-light\">\r\n      <a class=\"navbar-brand\" href=\"#home\">Google Books</a>\r\n      <div class=\"collapse navbar-collapse\">\r\n        <ul class=\"navbar-nav mr-auto\">\r\n          <li class=\"nav-item active\">\r\n            <a class=\"nav-link\" href=\"/\">Search<span class=\"sr-only\">(current)</span></a>\r\n          </li>\r\n          <li class=\"nav-item\">\r\n            <a class=\"nav-link\" href=\"/saved\">Saved</a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport './Header.css';\r\n\r\nfunction Header() {\r\n  return (\r\n    <div class=\"jumbotron jumbotron-fluid\">\r\n      <div class=\"container\">\r\n        <h1 class=\"display-4\">React Book Search</h1>\r\n        <p class=\"lead\">Search and Save Books of Interest</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header;","import axios from \"axios\";\r\n\r\nexport default {\r\n  // Gets all books\r\n  getBooks: function() {\r\n    return axios.get(\"/api/books\");\r\n  },\r\n  // Gets the book with the given id\r\n  getBook: function(id) {\r\n    return axios.get(\"/api/books/\" + id);\r\n  },\r\n  // Deletes the book with the given id\r\n  deleteBook: function(id) {\r\n    return axios.delete(\"/api/books/\" + id);\r\n  },\r\n  // Saves a book to the database\r\n  saveBook: function(bookData) {\r\n    return axios.post(\"/api/books\", bookData);\r\n  }\r\n};","import React, { Component } from 'react';\r\nimport API from '../utils/API';\r\n\r\nclass Saved extends Component {\r\n  state = {\r\n    title: '',\r\n    authors: [''],\r\n    description: '',\r\n    image: '',\r\n    link: ''\r\n  };\r\n\r\n  loadBooks = () => {\r\n    API.getBooks()\r\n      .then(res => {\r\n        console.log(res.data);\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className='container'>\r\n          <h1>Saved Books</h1>\r\n          <div className='row'>\r\n            <div className='col'>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Saved;","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport Navbar from './components/Navbar/Navbar.js';\nimport Header from './components/Header/Header.js';\n// import Search from './pages/Search';\nimport Saved from './pages/Saved';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Navbar />\n        <Header />\n        <Switch>\n          <Route exact path='/saved' component={Saved} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}